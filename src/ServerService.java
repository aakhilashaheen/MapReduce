/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-03-05")
public class ServerService {

  public interface Iface {

    public int enroll(Node node) throws org.apache.thrift.TException;

    public String mapReduceJob(String inputDirectory) throws org.apache.thrift.TException;

    public void completedMapTask(String inputFile, String intermediateFile) throws org.apache.thrift.TException;

    public void completedSortTask(String outputFile) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void enroll(Node node, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void mapReduceJob(String inputDirectory, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void completedMapTask(String inputFile, String intermediateFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void completedSortTask(String outputFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int enroll(Node node) throws org.apache.thrift.TException
    {
      send_enroll(node);
      return recv_enroll();
    }

    public void send_enroll(Node node) throws org.apache.thrift.TException
    {
      enroll_args args = new enroll_args();
      args.setNode(node);
      sendBase("enroll", args);
    }

    public int recv_enroll() throws org.apache.thrift.TException
    {
      enroll_result result = new enroll_result();
      receiveBase(result, "enroll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enroll failed: unknown result");
    }

    public String mapReduceJob(String inputDirectory) throws org.apache.thrift.TException
    {
      send_mapReduceJob(inputDirectory);
      return recv_mapReduceJob();
    }

    public void send_mapReduceJob(String inputDirectory) throws org.apache.thrift.TException
    {
      mapReduceJob_args args = new mapReduceJob_args();
      args.setInputDirectory(inputDirectory);
      sendBase("mapReduceJob", args);
    }

    public String recv_mapReduceJob() throws org.apache.thrift.TException
    {
      mapReduceJob_result result = new mapReduceJob_result();
      receiveBase(result, "mapReduceJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mapReduceJob failed: unknown result");
    }

    public void completedMapTask(String inputFile, String intermediateFile) throws org.apache.thrift.TException
    {
      send_completedMapTask(inputFile, intermediateFile);
      recv_completedMapTask();
    }

    public void send_completedMapTask(String inputFile, String intermediateFile) throws org.apache.thrift.TException
    {
      completedMapTask_args args = new completedMapTask_args();
      args.setInputFile(inputFile);
      args.setIntermediateFile(intermediateFile);
      sendBase("completedMapTask", args);
    }

    public void recv_completedMapTask() throws org.apache.thrift.TException
    {
      completedMapTask_result result = new completedMapTask_result();
      receiveBase(result, "completedMapTask");
      return;
    }

    public void completedSortTask(String outputFile) throws org.apache.thrift.TException
    {
      send_completedSortTask(outputFile);
      recv_completedSortTask();
    }

    public void send_completedSortTask(String outputFile) throws org.apache.thrift.TException
    {
      completedSortTask_args args = new completedSortTask_args();
      args.setOutputFile(outputFile);
      sendBase("completedSortTask", args);
    }

    public void recv_completedSortTask() throws org.apache.thrift.TException
    {
      completedSortTask_result result = new completedSortTask_result();
      receiveBase(result, "completedSortTask");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void enroll(Node node, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enroll_call method_call = new enroll_call(node, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enroll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Node node;
      public enroll_call(Node node, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.node = node;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enroll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enroll_args args = new enroll_args();
        args.setNode(node);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enroll();
      }
    }

    public void mapReduceJob(String inputDirectory, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mapReduceJob_call method_call = new mapReduceJob_call(inputDirectory, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mapReduceJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inputDirectory;
      public mapReduceJob_call(String inputDirectory, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputDirectory = inputDirectory;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapReduceJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mapReduceJob_args args = new mapReduceJob_args();
        args.setInputDirectory(inputDirectory);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mapReduceJob();
      }
    }

    public void completedMapTask(String inputFile, String intermediateFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      completedMapTask_call method_call = new completedMapTask_call(inputFile, intermediateFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class completedMapTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inputFile;
      private String intermediateFile;
      public completedMapTask_call(String inputFile, String intermediateFile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputFile = inputFile;
        this.intermediateFile = intermediateFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("completedMapTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        completedMapTask_args args = new completedMapTask_args();
        args.setInputFile(inputFile);
        args.setIntermediateFile(intermediateFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_completedMapTask();
      }
    }

    public void completedSortTask(String outputFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      completedSortTask_call method_call = new completedSortTask_call(outputFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class completedSortTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String outputFile;
      public completedSortTask_call(String outputFile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outputFile = outputFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("completedSortTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        completedSortTask_args args = new completedSortTask_args();
        args.setOutputFile(outputFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_completedSortTask();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("enroll", new enroll());
      processMap.put("mapReduceJob", new mapReduceJob());
      processMap.put("completedMapTask", new completedMapTask());
      processMap.put("completedSortTask", new completedSortTask());
      return processMap;
    }

    public static class enroll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enroll_args> {
      public enroll() {
        super("enroll");
      }

      public enroll_args getEmptyArgsInstance() {
        return new enroll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enroll_result getResult(I iface, enroll_args args) throws org.apache.thrift.TException {
        enroll_result result = new enroll_result();
        result.success = iface.enroll(args.node);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class mapReduceJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapReduceJob_args> {
      public mapReduceJob() {
        super("mapReduceJob");
      }

      public mapReduceJob_args getEmptyArgsInstance() {
        return new mapReduceJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mapReduceJob_result getResult(I iface, mapReduceJob_args args) throws org.apache.thrift.TException {
        mapReduceJob_result result = new mapReduceJob_result();
        result.success = iface.mapReduceJob(args.inputDirectory);
        return result;
      }
    }

    public static class completedMapTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, completedMapTask_args> {
      public completedMapTask() {
        super("completedMapTask");
      }

      public completedMapTask_args getEmptyArgsInstance() {
        return new completedMapTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public completedMapTask_result getResult(I iface, completedMapTask_args args) throws org.apache.thrift.TException {
        completedMapTask_result result = new completedMapTask_result();
        iface.completedMapTask(args.inputFile, args.intermediateFile);
        return result;
      }
    }

    public static class completedSortTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, completedSortTask_args> {
      public completedSortTask() {
        super("completedSortTask");
      }

      public completedSortTask_args getEmptyArgsInstance() {
        return new completedSortTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public completedSortTask_result getResult(I iface, completedSortTask_args args) throws org.apache.thrift.TException {
        completedSortTask_result result = new completedSortTask_result();
        iface.completedSortTask(args.outputFile);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("enroll", new enroll());
      processMap.put("mapReduceJob", new mapReduceJob());
      processMap.put("completedMapTask", new completedMapTask());
      processMap.put("completedSortTask", new completedSortTask());
      return processMap;
    }

    public static class enroll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enroll_args, Integer> {
      public enroll() {
        super("enroll");
      }

      public enroll_args getEmptyArgsInstance() {
        return new enroll_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            enroll_result result = new enroll_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            enroll_result result = new enroll_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enroll_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.enroll(args.node,resultHandler);
      }
    }

    public static class mapReduceJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapReduceJob_args, String> {
      public mapReduceJob() {
        super("mapReduceJob");
      }

      public mapReduceJob_args getEmptyArgsInstance() {
        return new mapReduceJob_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            mapReduceJob_result result = new mapReduceJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mapReduceJob_result result = new mapReduceJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mapReduceJob_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.mapReduceJob(args.inputDirectory,resultHandler);
      }
    }

    public static class completedMapTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, completedMapTask_args, Void> {
      public completedMapTask() {
        super("completedMapTask");
      }

      public completedMapTask_args getEmptyArgsInstance() {
        return new completedMapTask_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            completedMapTask_result result = new completedMapTask_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            completedMapTask_result result = new completedMapTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, completedMapTask_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.completedMapTask(args.inputFile, args.intermediateFile,resultHandler);
      }
    }

    public static class completedSortTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, completedSortTask_args, Void> {
      public completedSortTask() {
        super("completedSortTask");
      }

      public completedSortTask_args getEmptyArgsInstance() {
        return new completedSortTask_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            completedSortTask_result result = new completedSortTask_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            completedSortTask_result result = new completedSortTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, completedSortTask_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.completedSortTask(args.outputFile,resultHandler);
      }
    }

  }

  public static class enroll_args implements org.apache.thrift.TBase<enroll_args, enroll_args._Fields>, java.io.Serializable, Cloneable, Comparable<enroll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enroll_args");

    private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enroll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enroll_argsTupleSchemeFactory());
    }

    public Node node; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE((short)1, "node");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE
            return NODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enroll_args.class, metaDataMap);
    }

    public enroll_args() {
    }

    public enroll_args(
      Node node)
    {
      this();
      this.node = node;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enroll_args(enroll_args other) {
      if (other.isSetNode()) {
        this.node = new Node(other.node);
      }
    }

    public enroll_args deepCopy() {
      return new enroll_args(this);
    }

    @Override
    public void clear() {
      this.node = null;
    }

    public Node getNode() {
      return this.node;
    }

    public enroll_args setNode(Node node) {
      this.node = node;
      return this;
    }

    public void unsetNode() {
      this.node = null;
    }

    /** Returns true if field node is set (has been assigned a value) and false otherwise */
    public boolean isSetNode() {
      return this.node != null;
    }

    public void setNodeIsSet(boolean value) {
      if (!value) {
        this.node = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE:
        if (value == null) {
          unsetNode();
        } else {
          setNode((Node)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE:
        return getNode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE:
        return isSetNode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enroll_args)
        return this.equals((enroll_args)that);
      return false;
    }

    public boolean equals(enroll_args that) {
      if (that == null)
        return false;

      boolean this_present_node = true && this.isSetNode();
      boolean that_present_node = true && that.isSetNode();
      if (this_present_node || that_present_node) {
        if (!(this_present_node && that_present_node))
          return false;
        if (!this.node.equals(that.node))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_node = true && (isSetNode());
      list.add(present_node);
      if (present_node)
        list.add(node);

      return list.hashCode();
    }

    @Override
    public int compareTo(enroll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNode()).compareTo(other.isSetNode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enroll_args(");
      boolean first = true;

      sb.append("node:");
      if (this.node == null) {
        sb.append("null");
      } else {
        sb.append(this.node);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (node != null) {
        node.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enroll_argsStandardSchemeFactory implements SchemeFactory {
      public enroll_argsStandardScheme getScheme() {
        return new enroll_argsStandardScheme();
      }
    }

    private static class enroll_argsStandardScheme extends StandardScheme<enroll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enroll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.node = new Node();
                struct.node.read(iprot);
                struct.setNodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enroll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.node != null) {
          oprot.writeFieldBegin(NODE_FIELD_DESC);
          struct.node.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enroll_argsTupleSchemeFactory implements SchemeFactory {
      public enroll_argsTupleScheme getScheme() {
        return new enroll_argsTupleScheme();
      }
    }

    private static class enroll_argsTupleScheme extends TupleScheme<enroll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enroll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNode()) {
          struct.node.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enroll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.node = new Node();
          struct.node.read(iprot);
          struct.setNodeIsSet(true);
        }
      }
    }

  }

  public static class enroll_result implements org.apache.thrift.TBase<enroll_result, enroll_result._Fields>, java.io.Serializable, Cloneable, Comparable<enroll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enroll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enroll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enroll_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enroll_result.class, metaDataMap);
    }

    public enroll_result() {
    }

    public enroll_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enroll_result(enroll_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public enroll_result deepCopy() {
      return new enroll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public enroll_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enroll_result)
        return this.equals((enroll_result)that);
      return false;
    }

    public boolean equals(enroll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(enroll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enroll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enroll_resultStandardSchemeFactory implements SchemeFactory {
      public enroll_resultStandardScheme getScheme() {
        return new enroll_resultStandardScheme();
      }
    }

    private static class enroll_resultStandardScheme extends StandardScheme<enroll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enroll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enroll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enroll_resultTupleSchemeFactory implements SchemeFactory {
      public enroll_resultTupleScheme getScheme() {
        return new enroll_resultTupleScheme();
      }
    }

    private static class enroll_resultTupleScheme extends TupleScheme<enroll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enroll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enroll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class mapReduceJob_args implements org.apache.thrift.TBase<mapReduceJob_args, mapReduceJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapReduceJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapReduceJob_args");

    private static final org.apache.thrift.protocol.TField INPUT_DIRECTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("inputDirectory", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mapReduceJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mapReduceJob_argsTupleSchemeFactory());
    }

    public String inputDirectory; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_DIRECTORY((short)1, "inputDirectory");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_DIRECTORY
            return INPUT_DIRECTORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_DIRECTORY, new org.apache.thrift.meta_data.FieldMetaData("inputDirectory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapReduceJob_args.class, metaDataMap);
    }

    public mapReduceJob_args() {
    }

    public mapReduceJob_args(
      String inputDirectory)
    {
      this();
      this.inputDirectory = inputDirectory;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapReduceJob_args(mapReduceJob_args other) {
      if (other.isSetInputDirectory()) {
        this.inputDirectory = other.inputDirectory;
      }
    }

    public mapReduceJob_args deepCopy() {
      return new mapReduceJob_args(this);
    }

    @Override
    public void clear() {
      this.inputDirectory = null;
    }

    public String getInputDirectory() {
      return this.inputDirectory;
    }

    public mapReduceJob_args setInputDirectory(String inputDirectory) {
      this.inputDirectory = inputDirectory;
      return this;
    }

    public void unsetInputDirectory() {
      this.inputDirectory = null;
    }

    /** Returns true if field inputDirectory is set (has been assigned a value) and false otherwise */
    public boolean isSetInputDirectory() {
      return this.inputDirectory != null;
    }

    public void setInputDirectoryIsSet(boolean value) {
      if (!value) {
        this.inputDirectory = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_DIRECTORY:
        if (value == null) {
          unsetInputDirectory();
        } else {
          setInputDirectory((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_DIRECTORY:
        return getInputDirectory();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_DIRECTORY:
        return isSetInputDirectory();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mapReduceJob_args)
        return this.equals((mapReduceJob_args)that);
      return false;
    }

    public boolean equals(mapReduceJob_args that) {
      if (that == null)
        return false;

      boolean this_present_inputDirectory = true && this.isSetInputDirectory();
      boolean that_present_inputDirectory = true && that.isSetInputDirectory();
      if (this_present_inputDirectory || that_present_inputDirectory) {
        if (!(this_present_inputDirectory && that_present_inputDirectory))
          return false;
        if (!this.inputDirectory.equals(that.inputDirectory))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputDirectory = true && (isSetInputDirectory());
      list.add(present_inputDirectory);
      if (present_inputDirectory)
        list.add(inputDirectory);

      return list.hashCode();
    }

    @Override
    public int compareTo(mapReduceJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputDirectory()).compareTo(other.isSetInputDirectory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputDirectory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputDirectory, other.inputDirectory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mapReduceJob_args(");
      boolean first = true;

      sb.append("inputDirectory:");
      if (this.inputDirectory == null) {
        sb.append("null");
      } else {
        sb.append(this.inputDirectory);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapReduceJob_argsStandardSchemeFactory implements SchemeFactory {
      public mapReduceJob_argsStandardScheme getScheme() {
        return new mapReduceJob_argsStandardScheme();
      }
    }

    private static class mapReduceJob_argsStandardScheme extends StandardScheme<mapReduceJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapReduceJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_DIRECTORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputDirectory = iprot.readString();
                struct.setInputDirectoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapReduceJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputDirectory != null) {
          oprot.writeFieldBegin(INPUT_DIRECTORY_FIELD_DESC);
          oprot.writeString(struct.inputDirectory);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapReduceJob_argsTupleSchemeFactory implements SchemeFactory {
      public mapReduceJob_argsTupleScheme getScheme() {
        return new mapReduceJob_argsTupleScheme();
      }
    }

    private static class mapReduceJob_argsTupleScheme extends TupleScheme<mapReduceJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapReduceJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputDirectory()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInputDirectory()) {
          oprot.writeString(struct.inputDirectory);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapReduceJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.inputDirectory = iprot.readString();
          struct.setInputDirectoryIsSet(true);
        }
      }
    }

  }

  public static class mapReduceJob_result implements org.apache.thrift.TBase<mapReduceJob_result, mapReduceJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapReduceJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapReduceJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mapReduceJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mapReduceJob_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapReduceJob_result.class, metaDataMap);
    }

    public mapReduceJob_result() {
    }

    public mapReduceJob_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapReduceJob_result(mapReduceJob_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public mapReduceJob_result deepCopy() {
      return new mapReduceJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public mapReduceJob_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mapReduceJob_result)
        return this.equals((mapReduceJob_result)that);
      return false;
    }

    public boolean equals(mapReduceJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(mapReduceJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mapReduceJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapReduceJob_resultStandardSchemeFactory implements SchemeFactory {
      public mapReduceJob_resultStandardScheme getScheme() {
        return new mapReduceJob_resultStandardScheme();
      }
    }

    private static class mapReduceJob_resultStandardScheme extends StandardScheme<mapReduceJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapReduceJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapReduceJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapReduceJob_resultTupleSchemeFactory implements SchemeFactory {
      public mapReduceJob_resultTupleScheme getScheme() {
        return new mapReduceJob_resultTupleScheme();
      }
    }

    private static class mapReduceJob_resultTupleScheme extends TupleScheme<mapReduceJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapReduceJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapReduceJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class completedMapTask_args implements org.apache.thrift.TBase<completedMapTask_args, completedMapTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<completedMapTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completedMapTask_args");

    private static final org.apache.thrift.protocol.TField INPUT_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("inputFile", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INTERMEDIATE_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateFile", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new completedMapTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new completedMapTask_argsTupleSchemeFactory());
    }

    public String inputFile; // required
    public String intermediateFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_FILE((short)1, "inputFile"),
      INTERMEDIATE_FILE((short)2, "intermediateFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_FILE
            return INPUT_FILE;
          case 2: // INTERMEDIATE_FILE
            return INTERMEDIATE_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_FILE, new org.apache.thrift.meta_data.FieldMetaData("inputFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERMEDIATE_FILE, new org.apache.thrift.meta_data.FieldMetaData("intermediateFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completedMapTask_args.class, metaDataMap);
    }

    public completedMapTask_args() {
    }

    public completedMapTask_args(
      String inputFile,
      String intermediateFile)
    {
      this();
      this.inputFile = inputFile;
      this.intermediateFile = intermediateFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completedMapTask_args(completedMapTask_args other) {
      if (other.isSetInputFile()) {
        this.inputFile = other.inputFile;
      }
      if (other.isSetIntermediateFile()) {
        this.intermediateFile = other.intermediateFile;
      }
    }

    public completedMapTask_args deepCopy() {
      return new completedMapTask_args(this);
    }

    @Override
    public void clear() {
      this.inputFile = null;
      this.intermediateFile = null;
    }

    public String getInputFile() {
      return this.inputFile;
    }

    public completedMapTask_args setInputFile(String inputFile) {
      this.inputFile = inputFile;
      return this;
    }

    public void unsetInputFile() {
      this.inputFile = null;
    }

    /** Returns true if field inputFile is set (has been assigned a value) and false otherwise */
    public boolean isSetInputFile() {
      return this.inputFile != null;
    }

    public void setInputFileIsSet(boolean value) {
      if (!value) {
        this.inputFile = null;
      }
    }

    public String getIntermediateFile() {
      return this.intermediateFile;
    }

    public completedMapTask_args setIntermediateFile(String intermediateFile) {
      this.intermediateFile = intermediateFile;
      return this;
    }

    public void unsetIntermediateFile() {
      this.intermediateFile = null;
    }

    /** Returns true if field intermediateFile is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateFile() {
      return this.intermediateFile != null;
    }

    public void setIntermediateFileIsSet(boolean value) {
      if (!value) {
        this.intermediateFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_FILE:
        if (value == null) {
          unsetInputFile();
        } else {
          setInputFile((String)value);
        }
        break;

      case INTERMEDIATE_FILE:
        if (value == null) {
          unsetIntermediateFile();
        } else {
          setIntermediateFile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_FILE:
        return getInputFile();

      case INTERMEDIATE_FILE:
        return getIntermediateFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_FILE:
        return isSetInputFile();
      case INTERMEDIATE_FILE:
        return isSetIntermediateFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completedMapTask_args)
        return this.equals((completedMapTask_args)that);
      return false;
    }

    public boolean equals(completedMapTask_args that) {
      if (that == null)
        return false;

      boolean this_present_inputFile = true && this.isSetInputFile();
      boolean that_present_inputFile = true && that.isSetInputFile();
      if (this_present_inputFile || that_present_inputFile) {
        if (!(this_present_inputFile && that_present_inputFile))
          return false;
        if (!this.inputFile.equals(that.inputFile))
          return false;
      }

      boolean this_present_intermediateFile = true && this.isSetIntermediateFile();
      boolean that_present_intermediateFile = true && that.isSetIntermediateFile();
      if (this_present_intermediateFile || that_present_intermediateFile) {
        if (!(this_present_intermediateFile && that_present_intermediateFile))
          return false;
        if (!this.intermediateFile.equals(that.intermediateFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputFile = true && (isSetInputFile());
      list.add(present_inputFile);
      if (present_inputFile)
        list.add(inputFile);

      boolean present_intermediateFile = true && (isSetIntermediateFile());
      list.add(present_intermediateFile);
      if (present_intermediateFile)
        list.add(intermediateFile);

      return list.hashCode();
    }

    @Override
    public int compareTo(completedMapTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputFile()).compareTo(other.isSetInputFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputFile, other.inputFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIntermediateFile()).compareTo(other.isSetIntermediateFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateFile, other.intermediateFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completedMapTask_args(");
      boolean first = true;

      sb.append("inputFile:");
      if (this.inputFile == null) {
        sb.append("null");
      } else {
        sb.append(this.inputFile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("intermediateFile:");
      if (this.intermediateFile == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completedMapTask_argsStandardSchemeFactory implements SchemeFactory {
      public completedMapTask_argsStandardScheme getScheme() {
        return new completedMapTask_argsStandardScheme();
      }
    }

    private static class completedMapTask_argsStandardScheme extends StandardScheme<completedMapTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completedMapTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputFile = iprot.readString();
                struct.setInputFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERMEDIATE_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.intermediateFile = iprot.readString();
                struct.setIntermediateFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completedMapTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputFile != null) {
          oprot.writeFieldBegin(INPUT_FILE_FIELD_DESC);
          oprot.writeString(struct.inputFile);
          oprot.writeFieldEnd();
        }
        if (struct.intermediateFile != null) {
          oprot.writeFieldBegin(INTERMEDIATE_FILE_FIELD_DESC);
          oprot.writeString(struct.intermediateFile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completedMapTask_argsTupleSchemeFactory implements SchemeFactory {
      public completedMapTask_argsTupleScheme getScheme() {
        return new completedMapTask_argsTupleScheme();
      }
    }

    private static class completedMapTask_argsTupleScheme extends TupleScheme<completedMapTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completedMapTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputFile()) {
          optionals.set(0);
        }
        if (struct.isSetIntermediateFile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInputFile()) {
          oprot.writeString(struct.inputFile);
        }
        if (struct.isSetIntermediateFile()) {
          oprot.writeString(struct.intermediateFile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completedMapTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.inputFile = iprot.readString();
          struct.setInputFileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.intermediateFile = iprot.readString();
          struct.setIntermediateFileIsSet(true);
        }
      }
    }

  }

  public static class completedMapTask_result implements org.apache.thrift.TBase<completedMapTask_result, completedMapTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<completedMapTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completedMapTask_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new completedMapTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new completedMapTask_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completedMapTask_result.class, metaDataMap);
    }

    public completedMapTask_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completedMapTask_result(completedMapTask_result other) {
    }

    public completedMapTask_result deepCopy() {
      return new completedMapTask_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completedMapTask_result)
        return this.equals((completedMapTask_result)that);
      return false;
    }

    public boolean equals(completedMapTask_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(completedMapTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completedMapTask_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completedMapTask_resultStandardSchemeFactory implements SchemeFactory {
      public completedMapTask_resultStandardScheme getScheme() {
        return new completedMapTask_resultStandardScheme();
      }
    }

    private static class completedMapTask_resultStandardScheme extends StandardScheme<completedMapTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completedMapTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completedMapTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completedMapTask_resultTupleSchemeFactory implements SchemeFactory {
      public completedMapTask_resultTupleScheme getScheme() {
        return new completedMapTask_resultTupleScheme();
      }
    }

    private static class completedMapTask_resultTupleScheme extends TupleScheme<completedMapTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completedMapTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completedMapTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class completedSortTask_args implements org.apache.thrift.TBase<completedSortTask_args, completedSortTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<completedSortTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completedSortTask_args");

    private static final org.apache.thrift.protocol.TField OUTPUT_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFile", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new completedSortTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new completedSortTask_argsTupleSchemeFactory());
    }

    public String outputFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTPUT_FILE((short)1, "outputFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTPUT_FILE
            return OUTPUT_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTPUT_FILE, new org.apache.thrift.meta_data.FieldMetaData("outputFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completedSortTask_args.class, metaDataMap);
    }

    public completedSortTask_args() {
    }

    public completedSortTask_args(
      String outputFile)
    {
      this();
      this.outputFile = outputFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completedSortTask_args(completedSortTask_args other) {
      if (other.isSetOutputFile()) {
        this.outputFile = other.outputFile;
      }
    }

    public completedSortTask_args deepCopy() {
      return new completedSortTask_args(this);
    }

    @Override
    public void clear() {
      this.outputFile = null;
    }

    public String getOutputFile() {
      return this.outputFile;
    }

    public completedSortTask_args setOutputFile(String outputFile) {
      this.outputFile = outputFile;
      return this;
    }

    public void unsetOutputFile() {
      this.outputFile = null;
    }

    /** Returns true if field outputFile is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputFile() {
      return this.outputFile != null;
    }

    public void setOutputFileIsSet(boolean value) {
      if (!value) {
        this.outputFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTPUT_FILE:
        if (value == null) {
          unsetOutputFile();
        } else {
          setOutputFile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTPUT_FILE:
        return getOutputFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTPUT_FILE:
        return isSetOutputFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completedSortTask_args)
        return this.equals((completedSortTask_args)that);
      return false;
    }

    public boolean equals(completedSortTask_args that) {
      if (that == null)
        return false;

      boolean this_present_outputFile = true && this.isSetOutputFile();
      boolean that_present_outputFile = true && that.isSetOutputFile();
      if (this_present_outputFile || that_present_outputFile) {
        if (!(this_present_outputFile && that_present_outputFile))
          return false;
        if (!this.outputFile.equals(that.outputFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outputFile = true && (isSetOutputFile());
      list.add(present_outputFile);
      if (present_outputFile)
        list.add(outputFile);

      return list.hashCode();
    }

    @Override
    public int compareTo(completedSortTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutputFile()).compareTo(other.isSetOutputFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFile, other.outputFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completedSortTask_args(");
      boolean first = true;

      sb.append("outputFile:");
      if (this.outputFile == null) {
        sb.append("null");
      } else {
        sb.append(this.outputFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completedSortTask_argsStandardSchemeFactory implements SchemeFactory {
      public completedSortTask_argsStandardScheme getScheme() {
        return new completedSortTask_argsStandardScheme();
      }
    }

    private static class completedSortTask_argsStandardScheme extends StandardScheme<completedSortTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completedSortTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTPUT_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputFile = iprot.readString();
                struct.setOutputFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completedSortTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outputFile != null) {
          oprot.writeFieldBegin(OUTPUT_FILE_FIELD_DESC);
          oprot.writeString(struct.outputFile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completedSortTask_argsTupleSchemeFactory implements SchemeFactory {
      public completedSortTask_argsTupleScheme getScheme() {
        return new completedSortTask_argsTupleScheme();
      }
    }

    private static class completedSortTask_argsTupleScheme extends TupleScheme<completedSortTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completedSortTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutputFile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutputFile()) {
          oprot.writeString(struct.outputFile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completedSortTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outputFile = iprot.readString();
          struct.setOutputFileIsSet(true);
        }
      }
    }

  }

  public static class completedSortTask_result implements org.apache.thrift.TBase<completedSortTask_result, completedSortTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<completedSortTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completedSortTask_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new completedSortTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new completedSortTask_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completedSortTask_result.class, metaDataMap);
    }

    public completedSortTask_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completedSortTask_result(completedSortTask_result other) {
    }

    public completedSortTask_result deepCopy() {
      return new completedSortTask_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completedSortTask_result)
        return this.equals((completedSortTask_result)that);
      return false;
    }

    public boolean equals(completedSortTask_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(completedSortTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completedSortTask_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completedSortTask_resultStandardSchemeFactory implements SchemeFactory {
      public completedSortTask_resultStandardScheme getScheme() {
        return new completedSortTask_resultStandardScheme();
      }
    }

    private static class completedSortTask_resultStandardScheme extends StandardScheme<completedSortTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completedSortTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completedSortTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completedSortTask_resultTupleSchemeFactory implements SchemeFactory {
      public completedSortTask_resultTupleScheme getScheme() {
        return new completedSortTask_resultTupleScheme();
      }
    }

    private static class completedSortTask_resultTupleScheme extends TupleScheme<completedSortTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completedSortTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completedSortTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
